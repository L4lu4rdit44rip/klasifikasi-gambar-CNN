# -*- coding: utf-8 -*-
"""RPS_model_LaluArditaArip.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JplNU_R-QBpSO4JEbzrRBTtVrvkORMdO
"""

# Commented out IPython magic to ensure Python compatibility.
import tensorflow as tf
import numpy as np
import zipfile
import os
import glob 
import warnings
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Activation, Dense, Flatten
from tensorflow.keras.layers import Dropout
from tensorflow.keras.optimizers import Adam
from keras.preprocessing import image
from google.colab import files
# %matplotlib inline
import matplotlib.pyplot as plt
import matplotlib.image as mpimg

from google.colab import drive
drive.mount('/content/drive')

ekstrak_zip = '/content/drive/MyDrive/SIB/Bottle Images.zip'
out_zip = zipfile.ZipFile(ekstrak_zip, 'r')
out_zip.extractall('/tmp/')
out_zip.close()

dir_dataset = "/tmp/Bottle Images"
dir_beerBottles = os.path.join("/tmp/Bottle Images/Beer Bottles")
dir_plasticBottle = os.path.join("/tmp/Bottle Images/Plastic Bottles")
dir_sodaBottle= os.path.join("/tmp/Bottle Images/Soda Bottle")
dir_waterBottle= os.path.join("/tmp/Bottle Images/Water Bottle")
dir_wineBottle= os.path.join("/tmp/Bottle Images/Wine Bottle")

total_image = len(list(glob.iglob("/tmp/Bottle Images/*/*.*", recursive=True)))
print("Total Gambar     : ",total_image)

total_beerBottles = len(os.listdir(dir_beerBottles))
total_plasticBottle = len(os.listdir(dir_plasticBottle))
total_sodaBottle = len(os.listdir(dir_sodaBottle))
total_waterBottle = len(os.listdir(dir_waterBottle))
total_wineBottle = len(os.listdir(dir_wineBottle))

print("Total Data Beer Bottoles Image      : ",total_beerBottles)
print("Total Data Plastic Bottles Image    : ",total_plasticBottle)
print("Total Data Soda Bottles Image       : ",total_sodaBottle)
print("Total Data Water Bottles Image      : ",total_waterBottle)
print("Total Data Wine Bottles Image       : ",total_wineBottle)

Train_datagen = ImageDataGenerator(
    rotation_range = 30,
    brightness_range = [0.2,1.0],
    shear_range = 0.2,
    zoom_range = 0.2,
    horizontal_flip = True,
    fill_mode = "nearest",
    rescale = 1./255,
    validation_split = 0.2
)

Validation_datagen = ImageDataGenerator(
    rotation_range = 30,
    brightness_range = [0.2,1.0],
    shear_range = 0.2,
    zoom_range = 0.2,
    horizontal_flip = True,
    fill_mode = "nearest",
    rescale = 1./255,
    validation_split = 0.2
)

Train_generator = Train_datagen.flow_from_directory(
    dir_dataset,
    target_size = (150, 150),
    color_mode = "rgb",
    class_mode = "categorical",
    batch_size = 16,
    shuffle = True,
    subset = "training"
)

Validation_generator = Validation_datagen.flow_from_directory(
    dir_dataset,
    target_size = (150, 150),
    color_mode = "rgb",
    class_mode = "categorical",
    batch_size = 16,
    shuffle = False,
    subset = "validation"
)

Model = Sequential(
    [
     Conv2D(32, (3,3), strides = (1,1), activation = 'relu' , input_shape = (150,150,3)),
     MaxPooling2D(pool_size = (2,2), padding = 'valid'),
     Conv2D(64, (3,3), strides = (1,1), activation = 'relu' ),
     MaxPooling2D(pool_size = (2,2), padding = 'valid'),
     Conv2D(128, (3,3), strides = (1,1), activation = 'relu' ),
     MaxPooling2D(pool_size = (2,2), padding = 'valid'),
     Flatten(),
     Dropout(0.2),
     Dense(128, activation = 'relu'),
     Dense(5, activation='softmax')
    ]
)

Model.summary()

# Penggunaan Optimizer 'Adam' dengan learning rate 0.00146
Adam(learning_rate=0.00146, name='Adam')
Model.compile(
              optimizer = 'Adam',
              loss = 'categorical_crossentropy',
              metrics = ['accuracy']
              )

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('accuracy')>0.92 and logs.get('val_accuracy')>0.92):
      print("Akurasi mencapi 90% lebih")
      self.model.stop_training = True
callbacks = myCallback()

with tf.device("/device:GPU:0"):
  history = Model.fit(
                    Train_generator, 
                    epochs =  100, 
                    steps_per_epoch = 1751//16, 
                    validation_data = Validation_generator, 
                    verbose = 1, 
                    validation_steps = 437//16,
                    callbacks=[callbacks]
                    )

acc = history.history['accuracy']
val_acc = history.history['val_accuracy']
loss = history.history['loss']
val_loss = history.history['val_loss']

epochs = range(len(acc))

plt.plot(epochs, acc, 'b', label = 'Training Accuracy',marker = 'o')
plt.plot(epochs, val_acc, 'g', label = 'Validataion Accuracy',marker = 'o')
plt.title('Training dan Validation Accuracy model')
plt.legend(loc = 'best')
plt.show()

plt.plot(epochs, loss, 'r', label = 'Training Loss',marker = '*')
plt.plot(epochs, val_loss, 'y', label = 'Validataion Loss',marker = '*')
plt.title('Training dan Validation Loss model')
plt.legend(loc = 'best')
plt.show()

def fungsi1():
  uploaded = files.upload()
  for fn in uploaded.keys():
  
    path = fn
    img = image.load_img(path, target_size=(150,150))
    imgplot = plt.imshow(img)
    x = image.img_to_array(img)
    x = np.expand_dims(x, axis=0)
    images = np.vstack([x])
    classes = Model.predict(images, batch_size=16)

    print(fn)
    plt.show(img)
    
    if classes[0][0]==1:
      print('Gambar Botol Beer')
    elif classes[0][1]==1:
      print('Gambar Botol Pelastik')
    elif classes[0][2]==1:
     print('Gambar Botol Soda')
    elif classes[0][3]==1:
     print('Gambar Botol Air')
    else :
     print('Gambar Botol Wine')

while True:
  pilihan = input ('''
pilih menu: 
1. input foto
2. selesai
  ''')
  if pilihan == '1':
    fungsi1()
  elif pilihan =='2':
    print('======selsasi======')
    break
  else:
    print('masukan pilihan yang lain')

warnings.filterwarnings('ignore')
converter = tf.lite.TFLiteConverter.from_keras_model(Model)
tflite_model = converter.convert()
with tf.io.gfile.GFile('RPS_model_LaluArditaArip.tflite', 'wb') as f:
  f.write(tflite_model)